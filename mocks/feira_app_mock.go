// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/feira/feira.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/unico/FeirasLivresAPI/model"
)

// MockFeiraApp is a mock of App interface.
type MockFeiraApp struct {
	ctrl     *gomock.Controller
	recorder *MockFeiraAppMockRecorder
}

// MockFeiraAppMockRecorder is the mock recorder for MockFeiraApp.
type MockFeiraAppMockRecorder struct {
	mock *MockFeiraApp
}

// NewMockFeiraApp creates a new mock instance.
func NewMockFeiraApp(ctrl *gomock.Controller) *MockFeiraApp {
	mock := &MockFeiraApp{ctrl: ctrl}
	mock.recorder = &MockFeiraAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeiraApp) EXPECT() *MockFeiraAppMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeiraApp) Create(ctx context.Context, feira model.FeiraRequest) (*model.Feira, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, feira)
	ret0, _ := ret[0].(*model.Feira)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFeiraAppMockRecorder) Create(ctx, feira interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeiraApp)(nil).Create), ctx, feira)
}

// Delete mocks base method.
func (m *MockFeiraApp) Delete(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFeiraAppMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeiraApp)(nil).Delete), ctx, id)
}

// ReadOne mocks base method.
func (m *MockFeiraApp) ReadOne(ctx context.Context, id string) (*model.Feira, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOne", ctx, id)
	ret0, _ := ret[0].(*model.Feira)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOne indicates an expected call of ReadOne.
func (mr *MockFeiraAppMockRecorder) ReadOne(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOne", reflect.TypeOf((*MockFeiraApp)(nil).ReadOne), ctx, id)
}

// Search mocks base method.
func (m *MockFeiraApp) Search(ctx context.Context, distrito string) ([]*model.Feira, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, distrito)
	ret0, _ := ret[0].([]*model.Feira)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockFeiraAppMockRecorder) Search(ctx, distrito interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockFeiraApp)(nil).Search), ctx, distrito)
}

// Update mocks base method.
func (m *MockFeiraApp) Update(ctx context.Context, id string, feira model.FeiraRequest) (*model.Feira, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, feira)
	ret0, _ := ret[0].(*model.Feira)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeiraAppMockRecorder) Update(ctx, id, feira interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeiraApp)(nil).Update), ctx, id, feira)
}
